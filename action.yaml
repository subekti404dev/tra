name: 'urVault action'
description: ''
inputs:
  secret: 
    description: ''
    required: true
    default: null
  type: 
    description: ''
    required: true
    default: dotenv
  filename: 
    description: ''
    required: true
    default: null
    
    
runs:
  using: "composite"
  steps:
    - name: Parse Secret
      id: vault
      shell: bash
      run: |
        REVERSED_STR=$(echo "${{ inputs.secret }}" | rev)
        DECODED_STR=$(echo "$REVERSED_STR" | base64 -d)
        IFS='|' read -r ID URL TOKEN <<< "$DECODED_STR"
        echo "ID=$ID" >> $GITHUB_OUTPUT
        echo "::add-mask::$ID"
        echo "URL=$URL" >> $GITHUB_OUTPUT
        echo "::add-mask::$URL"
        echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
        echo "::add-mask::$TOKEN"
        
    - name: Download env
      shell: bash
      run: |
        curl --location "${{ steps.vault.outputs.URL }}/v1/vwt/${{ steps.vault.outputs.ID }}?type=${{ inputs.type }}" --header "x-api-token: ${{ steps.vault.outputs.TOKEN }}" -o ${{ inputs.filename || steps.vault.outputs.ID }}
    - run: ls -lah
      shell: bash
    - name: Set Environment Variables
      shell: bash
      id: set-env
      run: |
        curl --location "${{ steps.vault.outputs.URL }}/v1/vwt/${{ steps.vault.outputs.ID }}?type=dotenv" --header "x-api-token: ${{ steps.vault.outputs.TOKEN }}" -o .tmp.env
        while IFS= read -r line || [[ -n "$line" ]]; do
          # Extract variable name and value
          var_name=$(echo "$line" | cut -d '=' -f 1)
          var_value=$(echo "$line" | cut -d '=' -f 2-)
          
          # Set the variable in $GITHUB_ENV
          echo "$var_name=$var_value" >> $GITHUB_ENV
          
          # Add mask for sensitive variables
          echo "::add-mask::$var_value"
        done < .tmp.env
        rm .tmp.env
